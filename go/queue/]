package main

import "fmt"

type Node[T comparable] struct {
	Value    T
	Next     *Node[T]
	Previous *Node[T]
}

func newNode[T comparable](value T) *Node[T] {
	return &Node[T]{
		Value:    value,
		Next:     nil,
		Previous: nil,
	}
}

type Queue[T comparable] struct {
	Head   *Node[T]
	Tail   *Node[T]
	length int
}

func NewQueue[T comparable]() *Queue[T] {
	return &Queue[T]{
		Head:   nil,
		length: 0,
	}
}

func (q *Queue[T]) Enqueue(value T) {
	newNode := newNode[t](value)

}

func main() {

	fmt.Println("vim-go")
}
